# Generated by Django 5.0.2 on 2025-07-07 13:36

from django.db import migrations


def migrate_language_data(apps, schema_editor):
    """Migrate existing language data to the new Language model structure"""
    Language = apps.get_model('games', 'Language')
    Focus = apps.get_model('games', 'Focus')
    Material = apps.get_model('games', 'Material')
    Label = apps.get_model('games', 'Label')
    Game = apps.get_model('games', 'Game')
    TrainingSession = apps.get_model('games', 'TrainingSession')
    
    # Create default languages
    en_lang, _ = Language.objects.get_or_create(code='en', defaults={'name': 'English'})
    de_lang, _ = Language.objects.get_or_create(code='de', defaults={'name': 'Deutsch'})
    
    # Migrate Focus objects
    for focus in Focus.objects.all():
        if hasattr(focus, 'language'):
            if focus.language == 'en':
                focus.languages.add(en_lang)
            elif focus.language == 'de':
                focus.languages.add(de_lang)
            else:
                # Default to English if language is not set or invalid
                focus.languages.add(en_lang)
    
    # Migrate Material objects
    for material in Material.objects.all():
        if hasattr(material, 'language'):
            if material.language == 'en':
                material.languages.add(en_lang)
            elif material.language == 'de':
                material.languages.add(de_lang)
            else:
                # Default to English if language is not set or invalid
                material.languages.add(en_lang)
    
    # Migrate Label objects
    for label in Label.objects.all():
        if hasattr(label, 'language'):
            if label.language == 'en':
                label.languages.add(en_lang)
            elif label.language == 'de':
                label.languages.add(de_lang)
            else:
                # Default to English if language is not set or invalid
                label.languages.add(en_lang)
    
    # Migrate Game objects
    for game in Game.objects.all():
        if hasattr(game, 'language'):
            if game.language == 'en':
                game.languages.add(en_lang)
            elif game.language == 'de':
                game.languages.add(de_lang)
            else:
                # Default to English if language is not set or invalid
                game.languages.add(en_lang)
    
    # Migrate TrainingSession objects
    for session in TrainingSession.objects.all():
        if hasattr(session, 'language'):
            if session.language == 'en':
                session.languages.add(en_lang)
            elif session.language == 'de':
                session.languages.add(de_lang)
            else:
                # Default to English if language is not set or invalid
                session.languages.add(en_lang)


def reverse_migrate_language_data(apps, schema_editor):
    """Reverse migration - this is not fully reversible but provides a placeholder"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('games', '0005_language_alter_focus_unique_together_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_language_data, reverse_migrate_language_data),
    ]
